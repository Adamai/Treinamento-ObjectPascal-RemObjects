unit NewLibrary_Async;

{----------------------------------------------------------------------------}
{ This unit was automatically generated by the RemObjects SDK after reading  }
{ the RODL file associated with this project .                               }
{                                                                            }
{ Do not modify this unit manually, or your changes will be lost when this   }
{ unit is regenerated the next time you compile the project.                 }
{----------------------------------------------------------------------------}

{$I RemObjects.inc}

interface

uses
  {$IFDEF DELPHIXE2UP}
    System.SysUtils, System.Classes, System.TypInfo,
  {$ELSE}
    SysUtils, Classes, TypInfo,
  {$ENDIF}
  {RemObjects:} uROXMLIntf, uROClasses, uROTypes, uROClientIntf, uROAsync,
  {Project:} NewLibrary_Intf;

type
  { INewService_Async }
  INewService_Async = interface(IROAsyncInterface)
    ['{ABACE3C3-0BD4-4AD2-A93F-450E8E9DF568}']
    procedure Invoke_Sum(const A: Integer; const B: Integer);
    procedure Invoke_GetServerTime;
    procedure Invoke_carregarSpeciality(const id: Utf8String);
    procedure Invoke_CarregarAdmingroup(const id: Utf8String);
    procedure Invoke_pesquisarSpeciality(const especialidade: Utf8String; const OS: Utf8String);
    procedure Invoke_pesquisarAdmin(const descricao: Utf8String; const OS: Utf8String);
    procedure Invoke_excluirAdmingroup(const id: Utf8String);
    procedure Invoke_AlterarAdmingroup(const description: Utf8String; const id: Utf8String);
    procedure Invoke_inserirAdmingroup(const id: Utf8String; const description: Utf8String);
    procedure Invoke_inserirSpeciality(const id: Utf8String; const description: Utf8String; const flag: Boolean;
	const admingroup: Utf8String);
    procedure Invoke_alterarSpeciality(const description: Utf8String; const flag: Boolean; const admingroup: Utf8String;
	const id: Utf8String);
    procedure Invoke_excluirSpeciality(const id: Utf8String);
    procedure Invoke_ListaSpeciality;
    procedure Invoke_ListaAdminGroup;
    function Retrieve_Sum: Integer;
    function Retrieve_GetServerTime: DateTime;
    function Retrieve_carregarSpeciality: speciality;
    function Retrieve_CarregarAdmingroup: admingroup;
    function Retrieve_pesquisarSpeciality: ArraySpeciality;
    function Retrieve_pesquisarAdmin: ArrayAdmin;
    function Retrieve_inserirAdmingroup: Boolean;
    function Retrieve_inserirSpeciality: Boolean;
    function Retrieve_ListaSpeciality: ArraySpeciality;
    function Retrieve_ListaAdminGroup: ArrayAdmin;
  end;

  { INewService_AsyncEx }
  INewService_AsyncEx = interface(IROAsyncInterfaceEx)
    ['{45096DB7-B3E1-48B8-8D8F-6574B960A1D2}']
    function BeginSum(const A: Integer; const B: Integer; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetServerTime(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BegincarregarSpeciality(const id: Utf8String; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginCarregarAdmingroup(const id: Utf8String; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginpesquisarSpeciality(const especialidade: Utf8String; const OS: Utf8String; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginpesquisarAdmin(const descricao: Utf8String; const OS: Utf8String; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginexcluirAdmingroup(const id: Utf8String; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginAlterarAdmingroup(const description: Utf8String; const id: Utf8String; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BegininserirAdmingroup(const id: Utf8String; const description: Utf8String; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BegininserirSpeciality(const id: Utf8String; const description: Utf8String; const flag: Boolean;
	const admingroup: Utf8String; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginalterarSpeciality(const description: Utf8String; const flag: Boolean; const admingroup: Utf8String;
	const id: Utf8String; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginexcluirSpeciality(const id: Utf8String; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginListaSpeciality(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginListaAdminGroup(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function EndSum(const aRequest: IROAsyncRequest): Integer;
    function EndGetServerTime(const aRequest: IROAsyncRequest): DateTime;
    function EndcarregarSpeciality(const aRequest: IROAsyncRequest): speciality;
    function EndCarregarAdmingroup(const aRequest: IROAsyncRequest): admingroup;
    function EndpesquisarSpeciality(const aRequest: IROAsyncRequest): ArraySpeciality;
    function EndpesquisarAdmin(const aRequest: IROAsyncRequest): ArrayAdmin;
    procedure EndexcluirAdmingroup(const aRequest: IROAsyncRequest);
    procedure EndAlterarAdmingroup(const aRequest: IROAsyncRequest);
    function EndinserirAdmingroup(const aRequest: IROAsyncRequest): Boolean;
    function EndinserirSpeciality(const aRequest: IROAsyncRequest): Boolean;
    procedure EndalterarSpeciality(const aRequest: IROAsyncRequest);
    procedure EndexcluirSpeciality(const aRequest: IROAsyncRequest);
    function EndListaSpeciality(const aRequest: IROAsyncRequest): ArraySpeciality;
    function EndListaAdminGroup(const aRequest: IROAsyncRequest): ArrayAdmin;
  end;

  { CoNewService_Async }
  CoNewService_Async = class
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): INewService_Async;
  end;

  { CoNewService_AsyncEx }
  CoNewService_AsyncEx = class
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): INewService_AsyncEx;
  end;

  { TNewService_AsyncProxy }

  TNewService_AsyncProxy = class(TROAsyncProxy, INewService_Async)
  protected
    function __GetInterfaceName:string; override;

    procedure Invoke_Sum(const A: Integer; const B: Integer);
    procedure Invoke_GetServerTime;
    procedure Invoke_carregarSpeciality(const id: Utf8String);
    procedure Invoke_CarregarAdmingroup(const id: Utf8String);
    procedure Invoke_pesquisarSpeciality(const especialidade: Utf8String; const OS: Utf8String);
    procedure Invoke_pesquisarAdmin(const descricao: Utf8String; const OS: Utf8String);
    procedure Invoke_excluirAdmingroup(const id: Utf8String);
    procedure Invoke_AlterarAdmingroup(const description: Utf8String; const id: Utf8String);
    procedure Invoke_inserirAdmingroup(const id: Utf8String; const description: Utf8String);
    procedure Invoke_inserirSpeciality(const id: Utf8String; const description: Utf8String; const flag: Boolean;
	const admingroup: Utf8String);
    procedure Invoke_alterarSpeciality(const description: Utf8String; const flag: Boolean; const admingroup: Utf8String;
	const id: Utf8String);
    procedure Invoke_excluirSpeciality(const id: Utf8String);
    procedure Invoke_ListaSpeciality;
    procedure Invoke_ListaAdminGroup;
    function Retrieve_Sum: Integer;
    function Retrieve_GetServerTime: DateTime;
    function Retrieve_carregarSpeciality: speciality;
    function Retrieve_CarregarAdmingroup: admingroup;
    function Retrieve_pesquisarSpeciality: ArraySpeciality;
    function Retrieve_pesquisarAdmin: ArrayAdmin;
    function Retrieve_inserirAdmingroup: Boolean;
    function Retrieve_inserirSpeciality: Boolean;
    function Retrieve_ListaSpeciality: ArraySpeciality;
    function Retrieve_ListaAdminGroup: ArrayAdmin;
  end;

  { TNewService_AsyncProxyEx }

  TNewService_AsyncProxyEx = class(TROAsyncProxyEx, INewService_AsyncEx)
  protected
    function __GetInterfaceName:string; override;

    function BeginSum(const A: Integer; const B: Integer; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetServerTime(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BegincarregarSpeciality(const id: Utf8String; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginCarregarAdmingroup(const id: Utf8String; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginpesquisarSpeciality(const especialidade: Utf8String; const OS: Utf8String; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginpesquisarAdmin(const descricao: Utf8String; const OS: Utf8String; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginexcluirAdmingroup(const id: Utf8String; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginAlterarAdmingroup(const description: Utf8String; const id: Utf8String; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BegininserirAdmingroup(const id: Utf8String; const description: Utf8String; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BegininserirSpeciality(const id: Utf8String; const description: Utf8String; const flag: Boolean;
	const admingroup: Utf8String; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginalterarSpeciality(const description: Utf8String; const flag: Boolean; const admingroup: Utf8String;
	const id: Utf8String; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginexcluirSpeciality(const id: Utf8String; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginListaSpeciality(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginListaAdminGroup(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function EndSum(const aRequest: IROAsyncRequest): Integer;
    function EndGetServerTime(const aRequest: IROAsyncRequest): DateTime;
    function EndcarregarSpeciality(const aRequest: IROAsyncRequest): speciality;
    function EndCarregarAdmingroup(const aRequest: IROAsyncRequest): admingroup;
    function EndpesquisarSpeciality(const aRequest: IROAsyncRequest): ArraySpeciality;
    function EndpesquisarAdmin(const aRequest: IROAsyncRequest): ArrayAdmin;
    procedure EndexcluirAdmingroup(const aRequest: IROAsyncRequest);
    procedure EndAlterarAdmingroup(const aRequest: IROAsyncRequest);
    function EndinserirAdmingroup(const aRequest: IROAsyncRequest): Boolean;
    function EndinserirSpeciality(const aRequest: IROAsyncRequest): Boolean;
    procedure EndalterarSpeciality(const aRequest: IROAsyncRequest);
    procedure EndexcluirSpeciality(const aRequest: IROAsyncRequest);
    function EndListaSpeciality(const aRequest: IROAsyncRequest): ArraySpeciality;
    function EndListaAdminGroup(const aRequest: IROAsyncRequest): ArrayAdmin;
  end;

implementation

uses
  {RemObjects:} uROTransportChannel, uROExceptions;

type
  TMyTransportChannel = class(TROTransportChannel) end;

{$IFDEF DELPHI10UP}{$REGION 'NewService'}{$ENDIF}
{ CoNewService }
class function CoNewService_Async.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): INewService_Async;
begin
  result := TNewService_AsyncProxy.Create(aMessage, aTransportChannel);
end;

{ TNewService_AsyncProxy }
function TNewService_AsyncProxy.__GetInterfaceName:string;
begin
  result := 'NewService';
end;

procedure TNewService_AsyncProxy.Invoke_Sum(const A: Integer; const B: Integer);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('Sum');

    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'Sum');
    lMessage.Write('A', TypeInfo(Integer), A, []);
    lMessage.Write('B', TypeInfo(Integer), B, []);
    __DispatchAsyncRequest('Sum',lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

function TNewService_AsyncProxy.Retrieve_Sum: Integer;
var
  __response:TStream;
  tc:TMyTransportChannel;
  lRetry:Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  lFreeStream := False;
  try
    __response := __RetrieveAsyncResponse('Sum');
    try
      try
        try
          lMessage.ReadFromStream(__response,lFreeStream);
        except
          lFreeStream := True;
          raise;
        end;

        lMessage.Read('Result', TypeInfo(Integer), Result, []);

      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject);
          lRetry := False;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then raise;
        end;
        on E: Exception do raise;
      end;
    finally
      if lFreeStream then FreeAndNil(__response);
    end;
  finally
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

procedure TNewService_AsyncProxy.Invoke_GetServerTime;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('GetServerTime');

    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'GetServerTime');
    __DispatchAsyncRequest('GetServerTime',lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

function TNewService_AsyncProxy.Retrieve_GetServerTime: DateTime;
var
  __response:TStream;
  tc:TMyTransportChannel;
  lRetry:Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  lFreeStream := False;
  try
    __response := __RetrieveAsyncResponse('GetServerTime');
    try
      try
        try
          lMessage.ReadFromStream(__response,lFreeStream);
        except
          lFreeStream := True;
          raise;
        end;

        lMessage.Read('Result', TypeInfo(DateTime), Result, [paIsDateTime]);

      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject);
          lRetry := False;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then raise;
        end;
        on E: Exception do raise;
      end;
    finally
      if lFreeStream then FreeAndNil(__response);
    end;
  finally
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

procedure TNewService_AsyncProxy.Invoke_carregarSpeciality(const id: Utf8String);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('carregarSpeciality');

    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'carregarSpeciality');
    lMessage.Write('id', TypeInfo(Utf8String), id, []);
    __DispatchAsyncRequest('carregarSpeciality',lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

function TNewService_AsyncProxy.Retrieve_carregarSpeciality: speciality;
var
  __response:TStream;
  tc:TMyTransportChannel;
  lRetry:Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  lFreeStream := False;
  try
    result := nil;
    __response := __RetrieveAsyncResponse('carregarSpeciality');
    try
      try
        try
          lMessage.ReadFromStream(__response,lFreeStream);
        except
          lFreeStream := True;
          raise;
        end;

        lMessage.Read('Result', TypeInfo(speciality), Result, []);

      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject);
          lRetry := False;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then raise;
        end;
        on E: Exception do raise;
      end;
    finally
      if lFreeStream then FreeAndNil(__response);
    end;
  finally
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

procedure TNewService_AsyncProxy.Invoke_CarregarAdmingroup(const id: Utf8String);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('CarregarAdmingroup');

    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'CarregarAdmingroup');
    lMessage.Write('id', TypeInfo(Utf8String), id, []);
    __DispatchAsyncRequest('CarregarAdmingroup',lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

function TNewService_AsyncProxy.Retrieve_CarregarAdmingroup: admingroup;
var
  __response:TStream;
  tc:TMyTransportChannel;
  lRetry:Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  lFreeStream := False;
  try
    result := nil;
    __response := __RetrieveAsyncResponse('CarregarAdmingroup');
    try
      try
        try
          lMessage.ReadFromStream(__response,lFreeStream);
        except
          lFreeStream := True;
          raise;
        end;

        lMessage.Read('Result', TypeInfo(admingroup), Result, []);

      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject);
          lRetry := False;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then raise;
        end;
        on E: Exception do raise;
      end;
    finally
      if lFreeStream then FreeAndNil(__response);
    end;
  finally
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

procedure TNewService_AsyncProxy.Invoke_pesquisarSpeciality(const especialidade: Utf8String; const OS: Utf8String);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('pesquisarSpeciality');

    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'pesquisarSpeciality');
    lMessage.Write('especialidade', TypeInfo(Utf8String), especialidade, []);
    lMessage.Write('OS', TypeInfo(Utf8String), OS, []);
    __DispatchAsyncRequest('pesquisarSpeciality',lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

function TNewService_AsyncProxy.Retrieve_pesquisarSpeciality: ArraySpeciality;
var
  __response:TStream;
  tc:TMyTransportChannel;
  lRetry:Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  lFreeStream := False;
  try
    result := nil;
    __response := __RetrieveAsyncResponse('pesquisarSpeciality');
    try
      try
        try
          lMessage.ReadFromStream(__response,lFreeStream);
        except
          lFreeStream := True;
          raise;
        end;

        lMessage.Read('Result', TypeInfo(ArraySpeciality), Result, []);

      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject);
          lRetry := False;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then raise;
        end;
        on E: Exception do raise;
      end;
    finally
      if lFreeStream then FreeAndNil(__response);
    end;
  finally
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

procedure TNewService_AsyncProxy.Invoke_pesquisarAdmin(const descricao: Utf8String; const OS: Utf8String);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('pesquisarAdmin');

    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'pesquisarAdmin');
    lMessage.Write('descricao', TypeInfo(Utf8String), descricao, []);
    lMessage.Write('OS', TypeInfo(Utf8String), OS, []);
    __DispatchAsyncRequest('pesquisarAdmin',lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

function TNewService_AsyncProxy.Retrieve_pesquisarAdmin: ArrayAdmin;
var
  __response:TStream;
  tc:TMyTransportChannel;
  lRetry:Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  lFreeStream := False;
  try
    result := nil;
    __response := __RetrieveAsyncResponse('pesquisarAdmin');
    try
      try
        try
          lMessage.ReadFromStream(__response,lFreeStream);
        except
          lFreeStream := True;
          raise;
        end;

        lMessage.Read('Result', TypeInfo(ArrayAdmin), Result, []);

      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject);
          lRetry := False;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then raise;
        end;
        on E: Exception do raise;
      end;
    finally
      if lFreeStream then FreeAndNil(__response);
    end;
  finally
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

procedure TNewService_AsyncProxy.Invoke_excluirAdmingroup(const id: Utf8String);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('excluirAdmingroup');

    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'excluirAdmingroup');
    lMessage.Write('id', TypeInfo(Utf8String), id, []);
    __DispatchAsyncRequest('excluirAdmingroup',lMessage, false);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

procedure TNewService_AsyncProxy.Invoke_AlterarAdmingroup(const description: Utf8String; const id: Utf8String);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('AlterarAdmingroup');

    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'AlterarAdmingroup');
    lMessage.Write('description', TypeInfo(Utf8String), description, []);
    lMessage.Write('id', TypeInfo(Utf8String), id, []);
    __DispatchAsyncRequest('AlterarAdmingroup',lMessage, false);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

procedure TNewService_AsyncProxy.Invoke_inserirAdmingroup(const id: Utf8String; const description: Utf8String);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('inserirAdmingroup');

    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'inserirAdmingroup');
    lMessage.Write('id', TypeInfo(Utf8String), id, []);
    lMessage.Write('description', TypeInfo(Utf8String), description, []);
    __DispatchAsyncRequest('inserirAdmingroup',lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

function TNewService_AsyncProxy.Retrieve_inserirAdmingroup: Boolean;
var
  __response:TStream;
  tc:TMyTransportChannel;
  lRetry:Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  lFreeStream := False;
  try
    __response := __RetrieveAsyncResponse('inserirAdmingroup');
    try
      try
        try
          lMessage.ReadFromStream(__response,lFreeStream);
        except
          lFreeStream := True;
          raise;
        end;

        lMessage.Read('Result', TypeInfo(Boolean), Result, []);

      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject);
          lRetry := False;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then raise;
        end;
        on E: Exception do raise;
      end;
    finally
      if lFreeStream then FreeAndNil(__response);
    end;
  finally
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

procedure TNewService_AsyncProxy.Invoke_inserirSpeciality(const id: Utf8String; const description: Utf8String; const flag: Boolean;
	const admingroup: Utf8String);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('inserirSpeciality');

    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'inserirSpeciality');
    lMessage.Write('id', TypeInfo(Utf8String), id, []);
    lMessage.Write('description', TypeInfo(Utf8String), description, []);
    lMessage.Write('flag', TypeInfo(Boolean), flag, []);
    lMessage.Write('admingroup', TypeInfo(Utf8String), admingroup, []);
    __DispatchAsyncRequest('inserirSpeciality',lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

function TNewService_AsyncProxy.Retrieve_inserirSpeciality: Boolean;
var
  __response:TStream;
  tc:TMyTransportChannel;
  lRetry:Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  lFreeStream := False;
  try
    __response := __RetrieveAsyncResponse('inserirSpeciality');
    try
      try
        try
          lMessage.ReadFromStream(__response,lFreeStream);
        except
          lFreeStream := True;
          raise;
        end;

        lMessage.Read('Result', TypeInfo(Boolean), Result, []);

      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject);
          lRetry := False;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then raise;
        end;
        on E: Exception do raise;
      end;
    finally
      if lFreeStream then FreeAndNil(__response);
    end;
  finally
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

procedure TNewService_AsyncProxy.Invoke_alterarSpeciality(const description: Utf8String; const flag: Boolean; const admingroup: Utf8String;
	const id: Utf8String);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('alterarSpeciality');

    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'alterarSpeciality');
    lMessage.Write('description', TypeInfo(Utf8String), description, []);
    lMessage.Write('flag', TypeInfo(Boolean), flag, []);
    lMessage.Write('admingroup', TypeInfo(Utf8String), admingroup, []);
    lMessage.Write('id', TypeInfo(Utf8String), id, []);
    __DispatchAsyncRequest('alterarSpeciality',lMessage, false);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

procedure TNewService_AsyncProxy.Invoke_excluirSpeciality(const id: Utf8String);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('excluirSpeciality');

    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'excluirSpeciality');
    lMessage.Write('id', TypeInfo(Utf8String), id, []);
    __DispatchAsyncRequest('excluirSpeciality',lMessage, false);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

procedure TNewService_AsyncProxy.Invoke_ListaSpeciality;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('ListaSpeciality');

    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'ListaSpeciality');
    __DispatchAsyncRequest('ListaSpeciality',lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

function TNewService_AsyncProxy.Retrieve_ListaSpeciality: ArraySpeciality;
var
  __response:TStream;
  tc:TMyTransportChannel;
  lRetry:Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  lFreeStream := False;
  try
    result := nil;
    __response := __RetrieveAsyncResponse('ListaSpeciality');
    try
      try
        try
          lMessage.ReadFromStream(__response,lFreeStream);
        except
          lFreeStream := True;
          raise;
        end;

        lMessage.Read('Result', TypeInfo(ArraySpeciality), Result, []);

      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject);
          lRetry := False;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then raise;
        end;
        on E: Exception do raise;
      end;
    finally
      if lFreeStream then FreeAndNil(__response);
    end;
  finally
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

procedure TNewService_AsyncProxy.Invoke_ListaAdminGroup;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('ListaAdminGroup');

    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'ListaAdminGroup');
    __DispatchAsyncRequest('ListaAdminGroup',lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

function TNewService_AsyncProxy.Retrieve_ListaAdminGroup: ArrayAdmin;
var
  __response:TStream;
  tc:TMyTransportChannel;
  lRetry:Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  lFreeStream := False;
  try
    result := nil;
    __response := __RetrieveAsyncResponse('ListaAdminGroup');
    try
      try
        try
          lMessage.ReadFromStream(__response,lFreeStream);
        except
          lFreeStream := True;
          raise;
        end;

        lMessage.Read('Result', TypeInfo(ArrayAdmin), Result, []);

      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject);
          lRetry := False;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then raise;
        end;
        on E: Exception do raise;
      end;
    finally
      if lFreeStream then FreeAndNil(__response);
    end;
  finally
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;
{$IFDEF DELPHI10UP}{$ENDREGION}{$ENDIF}

{$IFDEF DELPHI10UP}{$REGION 'NewServiceEx'}{$ENDIF}
{ CoNewServiceEx }
class function CoNewService_AsyncEx.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): INewService_AsyncEx;
begin
  result := TNewService_AsyncProxyEx.Create(aMessage, aTransportChannel);
end;

{ TNewService_AsyncProxyEx }
function TNewService_AsyncProxyEx.__GetInterfaceName:string;
begin
  result := 'NewService';
end;

function TNewService_AsyncProxyEx.BeginSum(const A: Integer; const B: Integer; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'Sum');
    lMessage.Write('A', TypeInfo(Integer), A, []);
    lMessage.Write('B', TypeInfo(Integer), B, []);
    Result := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

function TNewService_AsyncProxyEx.EndSum(const aRequest: IROAsyncRequest): Integer;
begin
  aRequest.ReadResponse;
  aRequest.Message.Read('Result', TypeInfo(Integer), Result, []);
end;

function TNewService_AsyncProxyEx.BeginGetServerTime(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'GetServerTime');
    Result := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

function TNewService_AsyncProxyEx.EndGetServerTime(const aRequest: IROAsyncRequest): DateTime;
begin
  aRequest.ReadResponse;
  aRequest.Message.Read('Result', TypeInfo(DateTime), Result, [paIsDateTime]);
end;

function TNewService_AsyncProxyEx.BegincarregarSpeciality(const id: Utf8String; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'carregarSpeciality');
    lMessage.Write('id', TypeInfo(Utf8String), id, []);
    Result := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

function TNewService_AsyncProxyEx.EndcarregarSpeciality(const aRequest: IROAsyncRequest): speciality;
begin
  result := nil;
  aRequest.ReadResponse;
  aRequest.Message.Read('Result', TypeInfo(speciality), Result, []);
end;

function TNewService_AsyncProxyEx.BeginCarregarAdmingroup(const id: Utf8String; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'CarregarAdmingroup');
    lMessage.Write('id', TypeInfo(Utf8String), id, []);
    Result := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

function TNewService_AsyncProxyEx.EndCarregarAdmingroup(const aRequest: IROAsyncRequest): admingroup;
begin
  result := nil;
  aRequest.ReadResponse;
  aRequest.Message.Read('Result', TypeInfo(admingroup), Result, []);
end;

function TNewService_AsyncProxyEx.BeginpesquisarSpeciality(const especialidade: Utf8String; const OS: Utf8String; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'pesquisarSpeciality');
    lMessage.Write('especialidade', TypeInfo(Utf8String), especialidade, []);
    lMessage.Write('OS', TypeInfo(Utf8String), OS, []);
    Result := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

function TNewService_AsyncProxyEx.EndpesquisarSpeciality(const aRequest: IROAsyncRequest): ArraySpeciality;
begin
  result := nil;
  aRequest.ReadResponse;
  aRequest.Message.Read('Result', TypeInfo(ArraySpeciality), Result, []);
end;

function TNewService_AsyncProxyEx.BeginpesquisarAdmin(const descricao: Utf8String; const OS: Utf8String; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'pesquisarAdmin');
    lMessage.Write('descricao', TypeInfo(Utf8String), descricao, []);
    lMessage.Write('OS', TypeInfo(Utf8String), OS, []);
    Result := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

function TNewService_AsyncProxyEx.EndpesquisarAdmin(const aRequest: IROAsyncRequest): ArrayAdmin;
begin
  result := nil;
  aRequest.ReadResponse;
  aRequest.Message.Read('Result', TypeInfo(ArrayAdmin), Result, []);
end;

function TNewService_AsyncProxyEx.BeginexcluirAdmingroup(const id: Utf8String; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'excluirAdmingroup');
    lMessage.Write('id', TypeInfo(Utf8String), id, []);
    Result := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

procedure TNewService_AsyncProxyEx.EndexcluirAdmingroup(const aRequest: IROAsyncRequest);
begin
  aRequest.ReadResponse;
end;

function TNewService_AsyncProxyEx.BeginAlterarAdmingroup(const description: Utf8String; const id: Utf8String; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'AlterarAdmingroup');
    lMessage.Write('description', TypeInfo(Utf8String), description, []);
    lMessage.Write('id', TypeInfo(Utf8String), id, []);
    Result := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

procedure TNewService_AsyncProxyEx.EndAlterarAdmingroup(const aRequest: IROAsyncRequest);
begin
  aRequest.ReadResponse;
end;

function TNewService_AsyncProxyEx.BegininserirAdmingroup(const id: Utf8String; const description: Utf8String; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'inserirAdmingroup');
    lMessage.Write('id', TypeInfo(Utf8String), id, []);
    lMessage.Write('description', TypeInfo(Utf8String), description, []);
    Result := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

function TNewService_AsyncProxyEx.EndinserirAdmingroup(const aRequest: IROAsyncRequest): Boolean;
begin
  aRequest.ReadResponse;
  aRequest.Message.Read('Result', TypeInfo(Boolean), Result, []);
end;

function TNewService_AsyncProxyEx.BegininserirSpeciality(const id: Utf8String; const description: Utf8String; const flag: Boolean;
	const admingroup: Utf8String; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'inserirSpeciality');
    lMessage.Write('id', TypeInfo(Utf8String), id, []);
    lMessage.Write('description', TypeInfo(Utf8String), description, []);
    lMessage.Write('flag', TypeInfo(Boolean), flag, []);
    lMessage.Write('admingroup', TypeInfo(Utf8String), admingroup, []);
    Result := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

function TNewService_AsyncProxyEx.EndinserirSpeciality(const aRequest: IROAsyncRequest): Boolean;
begin
  aRequest.ReadResponse;
  aRequest.Message.Read('Result', TypeInfo(Boolean), Result, []);
end;

function TNewService_AsyncProxyEx.BeginalterarSpeciality(const description: Utf8String; const flag: Boolean; const admingroup: Utf8String;
	const id: Utf8String; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'alterarSpeciality');
    lMessage.Write('description', TypeInfo(Utf8String), description, []);
    lMessage.Write('flag', TypeInfo(Boolean), flag, []);
    lMessage.Write('admingroup', TypeInfo(Utf8String), admingroup, []);
    lMessage.Write('id', TypeInfo(Utf8String), id, []);
    Result := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

procedure TNewService_AsyncProxyEx.EndalterarSpeciality(const aRequest: IROAsyncRequest);
begin
  aRequest.ReadResponse;
end;

function TNewService_AsyncProxyEx.BeginexcluirSpeciality(const id: Utf8String; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'excluirSpeciality');
    lMessage.Write('id', TypeInfo(Utf8String), id, []);
    Result := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

procedure TNewService_AsyncProxyEx.EndexcluirSpeciality(const aRequest: IROAsyncRequest);
begin
  aRequest.ReadResponse;
end;

function TNewService_AsyncProxyEx.BeginListaSpeciality(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'ListaSpeciality');
    Result := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

function TNewService_AsyncProxyEx.EndListaSpeciality(const aRequest: IROAsyncRequest): ArraySpeciality;
begin
  result := nil;
  aRequest.ReadResponse;
  aRequest.Message.Read('Result', TypeInfo(ArraySpeciality), Result, []);
end;

function TNewService_AsyncProxyEx.BeginListaAdminGroup(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'ListaAdminGroup');
    Result := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lTransportChannel := nil;
    lMessage := nil;
  end;
end;

function TNewService_AsyncProxyEx.EndListaAdminGroup(const aRequest: IROAsyncRequest): ArrayAdmin;
begin
  result := nil;
  aRequest.ReadResponse;
  aRequest.Message.Read('Result', TypeInfo(ArrayAdmin), Result, []);
end;
{$IFDEF DELPHI10UP}{$ENDREGION}{$ENDIF}

end.

unit NewLibrary_Invk;

{----------------------------------------------------------------------------}
{ This unit was automatically generated by the RemObjects SDK after reading  }
{ the RODL file associated with this project .                               }
{                                                                            }
{ Do not modify this unit manually, or your changes will be lost when this   }
{ unit is regenerated the next time you compile the project.                 }
{----------------------------------------------------------------------------}

{$I RemObjects.inc}

interface

uses
  {$IFDEF DELPHIXE2UP}
    System.Classes,
  {$ELSE}
    Classes,
  {$ENDIF}
  {RemObjects:} uROXMLIntf, uROServer, uROServerIntf, uROClasses, uROTypes, uROClientIntf,
  {Generated:} NewLibrary_Intf;

type
  TNewService_Invoker = class(TROInvoker)
  private
  protected
  public
    constructor Create; override;
  published
    procedure Invoke_Sum(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
    procedure Invoke_GetServerTime(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
    procedure Invoke_carregarSpeciality(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
    procedure Invoke_CarregarAdmingroup(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
    procedure Invoke_pesquisarSpeciality(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
    procedure Invoke_pesquisarAdmin(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
    procedure Invoke_excluirAdmingroup(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
    procedure Invoke_AlterarAdmingroup(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
    procedure Invoke_inserirAdmingroup(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
    procedure Invoke_inserirSpeciality(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
    procedure Invoke_alterarSpeciality(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
    procedure Invoke_excluirSpeciality(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
    procedure Invoke_ListaSpeciality(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
    procedure Invoke_ListaAdminGroup(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
  end;

implementation

uses
  {RemObjects:} uROEventRepository, uRORes, uROClient;

{$IFDEF DELPHI10UP}{$REGION 'TNewService_Invoker'}{$ENDIF}
{ TNewService_Invoker }
constructor TNewService_Invoker.Create;
begin
  inherited Create;
  FAbstract := False;
end;

procedure TNewService_Invoker.Invoke_Sum(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
{ function Sum(const A: Integer; const B: Integer): Integer; }
var
  A: Integer;
  B: Integer;
  lResult: Integer;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles);
  try
    __Message.Read('A', TypeInfo(Integer), A, []);
    __Message.Read('B', TypeInfo(Integer), B, []);

    lResult := (__Instance as INewService).Sum(A, B);

    __Message.InitializeResponseMessage(__Transport, 'NewLibrary', 'NewService', 'SumResponse');
    __Message.Write('Result', TypeInfo(Integer), lResult, []);
    __Message.Finalize;
    __Message.UnsetAttributes(__Transport);

  finally
  end;
end;

procedure TNewService_Invoker.Invoke_GetServerTime(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
{ function GetServerTime: DateTime; }
var
  lResult: DateTime;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles);
  try
    lResult := (__Instance as INewService).GetServerTime;

    __Message.InitializeResponseMessage(__Transport, 'NewLibrary', 'NewService', 'GetServerTimeResponse');
    __Message.Write('Result', TypeInfo(DateTime), lResult, [paIsDateTime]);
    __Message.Finalize;
    __Message.UnsetAttributes(__Transport);

  finally
  end;
end;

procedure TNewService_Invoker.Invoke_carregarSpeciality(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
{ function carregarSpeciality(const id: Utf8String): speciality; }
var
  id: Utf8String;
  lResult: NewLibrary_Intf.speciality;
  __lObjectDisposer: TROObjectDisposer;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles);
  lResult := nil;
  try
    __Message.Read('id', TypeInfo(Utf8String), id, []);

    lResult := (__Instance as INewService).carregarSpeciality(id);

    __Message.InitializeResponseMessage(__Transport, 'NewLibrary', 'NewService', 'carregarSpecialityResponse');
    __Message.Write('Result', TypeInfo(NewLibrary_Intf.speciality), lResult, []);
    __Message.Finalize;
    __Message.UnsetAttributes(__Transport);

  finally
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(lResult);
    finally
      __lObjectDisposer.Free();
    end;
  end;
end;

procedure TNewService_Invoker.Invoke_CarregarAdmingroup(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
{ function CarregarAdmingroup(const id: Utf8String): admingroup; }
var
  id: Utf8String;
  lResult: NewLibrary_Intf.admingroup;
  __lObjectDisposer: TROObjectDisposer;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles);
  lResult := nil;
  try
    __Message.Read('id', TypeInfo(Utf8String), id, []);

    lResult := (__Instance as INewService).CarregarAdmingroup(id);

    __Message.InitializeResponseMessage(__Transport, 'NewLibrary', 'NewService', 'CarregarAdmingroupResponse');
    __Message.Write('Result', TypeInfo(NewLibrary_Intf.admingroup), lResult, []);
    __Message.Finalize;
    __Message.UnsetAttributes(__Transport);

  finally
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(lResult);
    finally
      __lObjectDisposer.Free();
    end;
  end;
end;

procedure TNewService_Invoker.Invoke_pesquisarSpeciality(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
{ function pesquisarSpeciality(const especialidade: Utf8String; const OS: Utf8String): ArraySpeciality; }
var
  especialidade: Utf8String;
  OS: Utf8String;
  lResult: NewLibrary_Intf.ArraySpeciality;
  __lObjectDisposer: TROObjectDisposer;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles);
  lResult := nil;
  try
    __Message.Read('especialidade', TypeInfo(Utf8String), especialidade, []);
    __Message.Read('OS', TypeInfo(Utf8String), OS, []);

    lResult := (__Instance as INewService).pesquisarSpeciality(especialidade, OS);

    __Message.InitializeResponseMessage(__Transport, 'NewLibrary', 'NewService', 'pesquisarSpecialityResponse');
    __Message.Write('Result', TypeInfo(NewLibrary_Intf.ArraySpeciality), lResult, []);
    __Message.Finalize;
    __Message.UnsetAttributes(__Transport);

  finally
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(lResult);
    finally
      __lObjectDisposer.Free();
    end;
  end;
end;

procedure TNewService_Invoker.Invoke_pesquisarAdmin(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
{ function pesquisarAdmin(const descricao: Utf8String; const OS: Utf8String): ArrayAdmin; }
var
  descricao: Utf8String;
  OS: Utf8String;
  lResult: NewLibrary_Intf.ArrayAdmin;
  __lObjectDisposer: TROObjectDisposer;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles);
  lResult := nil;
  try
    __Message.Read('descricao', TypeInfo(Utf8String), descricao, []);
    __Message.Read('OS', TypeInfo(Utf8String), OS, []);

    lResult := (__Instance as INewService).pesquisarAdmin(descricao, OS);

    __Message.InitializeResponseMessage(__Transport, 'NewLibrary', 'NewService', 'pesquisarAdminResponse');
    __Message.Write('Result', TypeInfo(NewLibrary_Intf.ArrayAdmin), lResult, []);
    __Message.Finalize;
    __Message.UnsetAttributes(__Transport);

  finally
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(lResult);
    finally
      __lObjectDisposer.Free();
    end;
  end;
end;

procedure TNewService_Invoker.Invoke_excluirAdmingroup(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
{ procedure excluirAdmingroup(const id: Utf8String); }
var
  id: Utf8String;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles);
  try
    __Message.Read('id', TypeInfo(Utf8String), id, []);

    (__Instance as INewService).excluirAdmingroup(id);

    __Message.InitializeResponseMessage(__Transport, 'NewLibrary', 'NewService', 'excluirAdmingroupResponse');
    __Message.Finalize;
    __Message.UnsetAttributes(__Transport);

    __oResponseOptions := [roNoResponse];

  finally
  end;
end;

procedure TNewService_Invoker.Invoke_AlterarAdmingroup(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
{ procedure AlterarAdmingroup(const description: Utf8String; const id: Utf8String); }
var
  description: Utf8String;
  id: Utf8String;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles);
  try
    __Message.Read('description', TypeInfo(Utf8String), description, []);
    __Message.Read('id', TypeInfo(Utf8String), id, []);

    (__Instance as INewService).AlterarAdmingroup(description, id);

    __Message.InitializeResponseMessage(__Transport, 'NewLibrary', 'NewService', 'AlterarAdmingroupResponse');
    __Message.Finalize;
    __Message.UnsetAttributes(__Transport);

    __oResponseOptions := [roNoResponse];

  finally
  end;
end;

procedure TNewService_Invoker.Invoke_inserirAdmingroup(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
{ function inserirAdmingroup(const id: Utf8String; const description: Utf8String): Boolean; }
var
  id: Utf8String;
  description: Utf8String;
  lResult: Boolean;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles);
  try
    __Message.Read('id', TypeInfo(Utf8String), id, []);
    __Message.Read('description', TypeInfo(Utf8String), description, []);

    lResult := (__Instance as INewService).inserirAdmingroup(id, description);

    __Message.InitializeResponseMessage(__Transport, 'NewLibrary', 'NewService', 'inserirAdmingroupResponse');
    __Message.Write('Result', TypeInfo(Boolean), lResult, []);
    __Message.Finalize;
    __Message.UnsetAttributes(__Transport);

  finally
  end;
end;

procedure TNewService_Invoker.Invoke_inserirSpeciality(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
{ function inserirSpeciality(const id: Utf8String; const description: Utf8String; const flag: Boolean; const admingroup: Utf8String): Boolean; }
var
  id: Utf8String;
  description: Utf8String;
  flag: Boolean;
  admingroup: Utf8String;
  lResult: Boolean;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles);
  try
    __Message.Read('id', TypeInfo(Utf8String), id, []);
    __Message.Read('description', TypeInfo(Utf8String), description, []);
    __Message.Read('flag', TypeInfo(Boolean), flag, []);
    __Message.Read('admingroup', TypeInfo(Utf8String), admingroup, []);

    lResult := (__Instance as INewService).inserirSpeciality(id, description, flag, admingroup);

    __Message.InitializeResponseMessage(__Transport, 'NewLibrary', 'NewService', 'inserirSpecialityResponse');
    __Message.Write('Result', TypeInfo(Boolean), lResult, []);
    __Message.Finalize;
    __Message.UnsetAttributes(__Transport);

  finally
  end;
end;

procedure TNewService_Invoker.Invoke_alterarSpeciality(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
{ procedure alterarSpeciality(const description: Utf8String; const flag: Boolean; const admingroup: Utf8String; const id: Utf8String); }
var
  description: Utf8String;
  flag: Boolean;
  admingroup: Utf8String;
  id: Utf8String;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles);
  try
    __Message.Read('description', TypeInfo(Utf8String), description, []);
    __Message.Read('flag', TypeInfo(Boolean), flag, []);
    __Message.Read('admingroup', TypeInfo(Utf8String), admingroup, []);
    __Message.Read('id', TypeInfo(Utf8String), id, []);

    (__Instance as INewService).alterarSpeciality(description, flag, admingroup, id);

    __Message.InitializeResponseMessage(__Transport, 'NewLibrary', 'NewService', 'alterarSpecialityResponse');
    __Message.Finalize;
    __Message.UnsetAttributes(__Transport);

    __oResponseOptions := [roNoResponse];

  finally
  end;
end;

procedure TNewService_Invoker.Invoke_excluirSpeciality(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
{ procedure excluirSpeciality(const id: Utf8String); }
var
  id: Utf8String;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles);
  try
    __Message.Read('id', TypeInfo(Utf8String), id, []);

    (__Instance as INewService).excluirSpeciality(id);

    __Message.InitializeResponseMessage(__Transport, 'NewLibrary', 'NewService', 'excluirSpecialityResponse');
    __Message.Finalize;
    __Message.UnsetAttributes(__Transport);

    __oResponseOptions := [roNoResponse];

  finally
  end;
end;

procedure TNewService_Invoker.Invoke_ListaSpeciality(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
{ function ListaSpeciality: ArraySpeciality; }
var
  lResult: NewLibrary_Intf.ArraySpeciality;
  __lObjectDisposer: TROObjectDisposer;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles);
  lResult := nil;
  try
    lResult := (__Instance as INewService).ListaSpeciality;

    __Message.InitializeResponseMessage(__Transport, 'NewLibrary', 'NewService', 'ListaSpecialityResponse');
    __Message.Write('Result', TypeInfo(NewLibrary_Intf.ArraySpeciality), lResult, []);
    __Message.Finalize;
    __Message.UnsetAttributes(__Transport);

  finally
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(lResult);
    finally
      __lObjectDisposer.Free();
    end;
  end;
end;

procedure TNewService_Invoker.Invoke_ListaAdminGroup(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
{ function ListaAdminGroup: ArrayAdmin; }
var
  lResult: NewLibrary_Intf.ArrayAdmin;
  __lObjectDisposer: TROObjectDisposer;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles);
  lResult := nil;
  try
    lResult := (__Instance as INewService).ListaAdminGroup;

    __Message.InitializeResponseMessage(__Transport, 'NewLibrary', 'NewService', 'ListaAdminGroupResponse');
    __Message.Write('Result', TypeInfo(NewLibrary_Intf.ArrayAdmin), lResult, []);
    __Message.Finalize;
    __Message.UnsetAttributes(__Transport);

  finally
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(lResult);
    finally
      __lObjectDisposer.Free();
    end;
  end;
end;
{$IFDEF DELPHI10UP}{$ENDREGION}{$ENDIF}

initialization
finalization
end.

unit NewService_Impl;

{----------------------------------------------------------------------------}
{ This unit was automatically generated by the RemObjects SDK after reading  }
{ the RODL file associated with this project .                               }
{                                                                            }
{ This is where you are supposed to code the implementation of your objects. }
{----------------------------------------------------------------------------}

{$I RemObjects.inc}

interface

uses
  {$IFDEF DELPHIXE2UP}
    System.SysUtils, System.Classes, System.TypInfo,
  {$ELSE}
    SysUtils, Classes, TypInfo,
  {$ENDIF}
  {RemObjects:} uROXMLIntf, uROClientIntf, uROClasses, uROTypes, uROServer, uROServerIntf, uROSessions,
  {Required:} uRORemoteDataModule,
  {Generated:} NewLibrary_Intf, Data.FMTBcd, Data.DBXMySQL, Data.DB,
  Data.SqlExpr, Vcl.Dialogs, Vcl.Controls;

type
  { TNewService }
  TNewService = class(TRORemoteDataModule, INewService)
    SQLQuery1: TSQLQuery;
    SQLConnection1: TSQLConnection;
  private
  protected
    { INewService methods }
    function Sum(const A: Integer; const B: Integer): Integer;
    function GetServerTime: DateTime;
    function carregarSpeciality(const id: Utf8String): speciality;
    function CarregarAdmingroup(const id: Utf8String): admingroup;
    function pesquisarSpeciality(const especialidade: Utf8String; const OS: Utf8String): ArraySpeciality;
    function pesquisarAdmin(const descricao: Utf8String; const OS: Utf8String): ArrayAdmin;
    procedure excluirAdmingroup(const id: Utf8String);
    procedure AlterarAdmingroup(const description: Utf8String; const id: Utf8String);
    function inserirAdmingroup(const id: Utf8String; const description: Utf8String): Boolean;
    function inserirSpeciality(const id: Utf8String; const description: Utf8String; const flag: Boolean; const admingroup: Utf8String): Boolean;
    procedure alterarSpeciality(const description: Utf8String; const flag: Boolean; const admingroup: Utf8String; const id: Utf8String);
    procedure excluirSpeciality(const id: Utf8String);
    function ListaSpeciality: ArraySpeciality;
    function ListaAdminGroup: ArrayAdmin;
  end;

implementation

{$IFDEF DELPHIXE2UP}
{%CLASSGROUP 'System.Classes.TPersistent'}
{$ENDIF}

{$IFNDEF FPC}
  {$R *.dfm}
{$ELSE}
  {$R *.lfm}
{$ENDIF}
uses
  {Generated:} NewLibrary_Invk;

procedure Create_NewService(out anInstance : IUnknown);
begin
  anInstance := TNewService.Create(nil);
end;

{ NewService }
function TNewService.Sum(const A: Integer; const B: Integer): Integer;
begin
end;

procedure TNewService.excluirAdmingroup(const id: Utf8String);
//var
//  buttonSelected : Integer;
begin
//MOVER PARA APLICAÇÃO
  //buttonSelected := MessageDlg('Confirmação',mtCustom, [MbYes, MbNo], 0);
  //if buttonSelected = MrYes then
  //begin
    SQLQuery1.SQL.Clear;
    //Se der merda pode ser que seja aqui
    SQLQuery1.SQL.Add('DELETE FROM equipmaintdb.admingroup WHERE admingroupid="'+id+'";');
    SQLQuery1.ExecSQL;
  //end;
end;

procedure TNewService.excluirSpeciality(const id: Utf8String);
//var
//  buttonSelected : Integer;
begin
//  buttonSelected := MessageDlg('Confirmação',mtCustom, [MbYes, MbNo], 0);
//  if buttonSelected = MrYes then
//  begin
    SQLQuery1.SQL.Clear;
    SQLQuery1.SQL.Add('DELETE FROM equipmaintdb.speciality WHERE specialityid="'+id+'";');
    SQLQuery1.ExecSQL;
//  end;
end;

function TNewService.GetServerTime: DateTime;
begin
end;

procedure TNewService.AlterarAdmingroup(const description, id: Utf8String);
begin
  SQLQuery1.SQL.Clear;
  SQLQuery1.SQL.Add('UPDATE equipmaintdb.admingroup SET description="'+description+'" WHERE admingroupid="'+id+'";');
  try
    SQLQuery1.ExecSQL;
  except
    showmessage('ERRO');
  end;
end;

procedure TNewService.alterarSpeciality(const description: Utf8String;
  const flag: Boolean; const admingroup, id: Utf8String);
var
  variavel : string;
begin
variavel := '0';
if flag then
  variavel := '1';
  SQLQuery1.SQL.Clear;
  SQLQuery1.SQL.Add('UPDATE equipmaintdb.speciality SET description="'+description+'", flag_funcao_oper="'+variavel+'", codg_admingroup_fk="'+admingroup+'" WHERE specialityid="'+id+'" LIMIT 1;');
  try
    SQLQuery1.ExecSQL;
  except
    showmessage('ERRO');
  end;
end;

function TNewService.CarregarAdmingroup(const id: Utf8String): admingroup;
begin
  SQLQuery1.SQL.Clear;
  SQLQuery1.SQL.Add('SELECT * FROM admingroup WHERE admingroupid ="'+ id + '";');
  SQLQuery1.Open;
  SQLQuery1.First;
  result := admingroup.create;
  result.id := SQLQuery1.FieldByName('admingroupid').AsString;
  result.description := SQLQuery1.FieldByName('description').AsString;
  result.comando := admCMDDetalhes;
end;

function TNewService.inserirAdmingroup(const id,
  description: Utf8String): Boolean;
begin
  SQLQuery1.SQL.Clear;
  SQLQuery1.SQL.Add('SELECT * FROM admingroup WHERE admingroupid ="'+ id + '";');
  SQLQuery1.Open;
  SQLQuery1.First;
  if not (SQLQuery1.Eof) then
  begin
    //MOVER PARA CLIENTE?
    //showmessage('Código ja foi inserido');
    Result := false;
    exit;
  end;
  SQLQuery1.SQL.Clear;
  SQLQuery1.SQL.Add('INSERT INTO admingroup (admingroupid, description) VALUES ("'+id+'", "'+description+'");');
  try
    SQLQuery1.ExecSQL;
    Result := true;
  except
    //MOVER PARA CLIENTE?
    //showmessage('ERRO');
  end;
end;

function TNewService.inserirSpeciality(const id, description: Utf8String;
  const flag: Boolean; const admingroup: Utf8String): Boolean;
var
  variavel : String;
begin
  variavel := '0';
  if flag then
  begin
    variavel := '1';
  end;
  SQLQuery1.SQL.Clear;
  SQLQuery1.SQL.Add('SELECT * FROM speciality WHERE specialityid ="'+ id + '";');
  SQLQuery1.Open;
  SQLQuery1.First;
  if not (SQLQuery1.Eof) then
  begin
  //MOVER PARA CLIENTE?
    //showmessage('Código ja foi inserido');
    Result := false;
    exit;
  end;
  SQLQuery1.SQL.Clear;
  SQLQuery1.SQL.Add('INSERT INTO speciality (specialityid, description, flag_funcao_oper, codg_admingroup_fk) VALUES ("'+id+'", "'+description+'", "'+variavel+'", "'+admingroup+'");');
  try
    SQLQuery1.ExecSQL;
    Result := true;
  except
  //MOVER PARA CLIENTE?
    showmessage('ERRO');
  end;
end;

function TNewService.ListaAdminGroup: ArrayAdmin;
var
  objAdmGrp : AdminGroup;
begin
  SQLQuery1.SQL.Clear;
  SQLQuery1.SQL.Add('SELECT * FROM admingroup');
  SQLQuery1.Open;
  SQLQuery1.First;
  result := ArrayAdmin.create;
  while not (SQLQuery1.Eof) do
  begin
    ObjAdmGrp := admingroup.Create;
    objadmgrp.id := SQLQuery1.FieldByName('admingroupid').AsString;
    objadmgrp.description := SQLQuery1.FieldByName('description').AsString;
    result.Add(objadmgrp);
    SQLQuery1.Next;
  end;
end;

function TNewService.ListaSpeciality: ArraySpeciality;
var
  objSpeciality : Speciality;
  flag : boolean;
begin
  SQLQuery1.SQL.Clear;
  SQLQuery1.SQL.Add('SELECT * FROM speciality;');
  SQLQuery1.Open;
  SQLQuery1.First;
  result := arrayspeciality.create;
  while not (SQLQuery1.Eof) do
  begin
  flag := false;
  if SQLQuery1.FieldByName('flag_funcao_oper').AsString='1' then
    flag := true;
    objSpeciality := Speciality.create;
    objSpeciality.id := SQLQuery1.FieldByName('specialityid').AsString;
    objSpeciality.description := SQLQuery1.FieldByName('description').AsString;
    objSpeciality.flag_funcao_oper := flag;
    objSpeciality.codg_admingroup_fk := SQLQuery1.FieldByName('codg_admingroup_fk').AsString;
    objSpeciality.comando := specCMDdetalhes;
    result.add(objSpeciality);
    SQLQuery1.Next;
  end;
end;

function TNewService.pesquisarAdmin(const descricao,
  OS: Utf8String): ArrayAdmin;
var
  objadmgrp : Admingroup;
begin
  SQLQuery1.SQL.Clear;
  result := arrayadmin.Create;
  if (Length(OS)=0) then
  begin
    SQLQuery1.SQL.Add('SELECT * FROM admingroup WHERE description LIKE "%'+ descricao + '%";');
    end
  else
  begin
    SQLQuery1.SQL.Add('SELECT * FROM admingroup WHERE description LIKE "%'+ descricao + '%" AND admingroupid = "' + OS + '";');
  end;
  SQLQuery1.Open;
  SQLQuery1.First;
  while not (SQLQuery1.Eof) do
  begin
    ObjAdmGrp := admingroup.Create;
    objadmgrp.id := SQLQuery1.FieldByName('admingroupid').AsString;
    objadmgrp.description := SQLQuery1.FieldByName('description').AsString;
    result.Add(objadmgrp);
    SQLQuery1.Next;
  end;
end;

function TNewService.pesquisarSpeciality(const especialidade,
  OS: Utf8String): ArraySpeciality;
var
  objSpeciality : Speciality;
  flag : boolean;
begin
  flag := false;
  SQLQuery1.SQL.Clear;
  result := arrayspeciality.Create;
  if (Length(OS)=0) then
  begin
    SQLQuery1.SQL.Add('SELECT * FROM speciality WHERE description LIKE "%'+ especialidade + '%";');
  end
  else
  begin
    SQLQuery1.SQL.Add('SELECT * FROM speciality WHERE description LIKE "%'+ especialidade + '%" AND codg_admingroup_fk = "' + OS + '";');
  end;
  SQLQuery1.Open;
  SQLQuery1.First;
  while not (SQLQuery1.Eof) do
  begin
    if SQLQuery1.FieldByName('flag_funcao_oper').AsString='true' then
      flag := true;
    objSpeciality := Speciality.create;
    objSpeciality.id := SQLQuery1.FieldByName('specialityid').AsString;
    objSpeciality.description := SQLQuery1.FieldByName('description').AsString;
    objSpeciality.flag_funcao_oper := flag;
    objSpeciality.codg_admingroup_fk := SQLQuery1.FieldByName('codg_admingroup_fk').AsString;
    objSpeciality.comando := specCMDdetalhes;
    result.add(objSpeciality);
    SQLQuery1.Next;
  end;
end;

function TNewService.carregarSpeciality(const id: Utf8string): speciality;
var
  flag : boolean;
begin
  flag := false;
  SQLQuery1.SQL.Clear;
  SQLQuery1.SQL.Add('SELECT * FROM speciality WHERE specialityid ="'+ id + '";');
  SQLQuery1.Open;
  SQLQuery1.First;
  if SQLQuery1.FieldByName('flag_funcao_oper').Asstring='1' then
    flag := true;
  result := Speciality.create;
  result.id := SQLQuery1.FieldByName('specialityid').AsString;
  result.description := SQLQuery1.FieldByName('description').AsString;
  result.flag_funcao_oper := flag;
  result.codg_admingroup_fk := SQLQuery1.FieldByName('codg_admingroup_fk').AsString;
  result.comando := specCMDDetalhes;
end;

var
  fClassFactory: IROClassFactory;
initialization
  fClassFactory := TROClassFactory.Create('NewService', {$IFDEF FPC}@{$ENDIF}Create_NewService, TNewService_Invoker);
  // RegisterForZeroConf(fClassFactory,'_NewService_rosdk._tcp.');

finalization
  UnRegisterClassFactory(fClassFactory);
  fClassFactory := nil;

end.
